using _Project.Dialogue;
using _Project.Dialogue.Config;
using _Project.Dialogue.Lines;
using _Project.Tests.EditMode.Mocks;
using NUnit.Framework;

namespace _Project.Tests.EditMode
{
    public class OptionsDialogueLineTests
    {
        [Test]
        public void OptionsDialogueLineCanLookUpOptionByUniqueId()
        {
            DialogueRunner runner = DialogueRunnerMocks.GetSimpleOption(null, 0);
            OptionsDialogueLine line = (OptionsDialogueLine) runner.CurrentDialogueLine;

            SpokenDialogueLine option1 = line.GetOptionByNext("next-option-branch-1");
            Assert.AreEqual("speaker-1", option1.Speaker);
            Assert.AreEqual("Test line - option - branch 1", option1.Dialogue);
            Assert.AreEqual("next-option-branch-1", option1.Next);

            SpokenDialogueLine option2 = line.GetOptionByNext("next-option-branch-2");
            Assert.AreEqual("speaker-2", option2.Speaker);
            Assert.AreEqual("Test line - option - branch 2", option2.Dialogue);
            Assert.AreEqual("next-option-branch-2", option2.Next);
        }

        [Test]
        public void OptionsDialogueLineCanBuildInlineBranches()
        {
            DialogueAssetLoader loader = new DialogueAssetLoader("OptionsDialogueLineTest/");
            DialogueRunner runner = new DialogueRunner(loader.Records);

            runner.SetCurrentRecord("branching-options");
            Assert.True(runner.Records.ContainsKey("branching-options-option-branch-1-autogenerated"));
            Assert.True(runner.Records.ContainsKey("branching-options-option-branch-2-autogenerated"));
        }

        [Test]
        public void OptionsDialogueLineCanTraverseInlineBranches()
        {
            DialogueSystem system = new DialogueSystem("OptionsDialogueLineTest", "branching-options");

            OptionsDialogueLine optionsDialogueLine = (OptionsDialogueLine) system.CurrentDialogueLine;

            SpokenDialogueLine option1 = optionsDialogueLine.Options[0];

            system.StepToNextDialogueLine(option1);
            SpokenDialogueLine line1 = system.CurrentDialogueLine;
            Assert.AreEqual("options-test-user", line1.Speaker);
            Assert.AreEqual("Branch 1 line 1", line1.Dialogue);

            system.StepToNextDialogueLine();
            SpokenDialogueLine line2 = system.CurrentDialogueLine;
            Assert.AreEqual("options-test-user", line2.Speaker);
            Assert.AreEqual("Branch 1 line 2", line2.Dialogue);

            system.StepToNextDialogueLine();
            SpokenDialogueLine line3 = system.CurrentDialogueLine;
            Assert.AreEqual("options-test-user", line3.Speaker);
            Assert.AreEqual("Branch 1 line 3", line3.Dialogue);
            Assert.AreEqual("branching-options", line3.Next);

            // Testing that Step() at the end of a branch picks up as normal
            system.StepToNextDialogueLine();
            OptionsDialogueLine line4 = (OptionsDialogueLine) system.CurrentDialogueLine;
            Assert.AreEqual("options-test-user", line4.Speaker);
            Assert.AreEqual("This is an options test", line4.Dialogue);
            Assert.IsInstanceOf<OptionBranchDialogueLine>(line4.Options[0]);
            Assert.IsInstanceOf<OptionBranchDialogueLine>(line4.Options[1]);
        }

        [Test]
        public void OptionsDialogueLineCanBuildNestedInlineBranches()
        {
            DialogueAssetLoader loader = new DialogueAssetLoader("OptionsDialogueLineTest/");
            DialogueRunner runner = new DialogueRunner(loader.Records);

            runner.SetCurrentRecord("nested-branching-options");
            Assert.True(runner.Records.ContainsKey("nested-branching-options-option-branch-1-autogenerated"));
            Assert.True(runner.Records.ContainsKey("nested-branching-options-option-branch-2-autogenerated"));
            Assert.True(runner.Records.ContainsKey("nested-branching-options-option-branch-3-autogenerated"));
            Assert.True(runner.Records.ContainsKey("nested-branching-options-option-branch-4-autogenerated"));
        }

        [Test]
        public void OptionsDialogueLineCanTraverseNestedInlineBranches()
        {
            DialogueSystem system = new DialogueSystem("OptionsDialogueLineTest/", "nested-branching-options");
            OptionsDialogueLine optionsDialogueLine = (OptionsDialogueLine) system.CurrentDialogueLine;

            SpokenDialogueLine option1 = optionsDialogueLine.Options[0];

            system.StepToNextDialogueLine(option1);
            Assert.AreEqual("options-test-user", system.CurrentDialogueLine.Speaker);
            Assert.AreEqual("Branch 1 line 1", system.CurrentDialogueLine.Dialogue);

            system.StepToNextDialogueLine();
            Assert.AreEqual("options-test-user", system.CurrentDialogueLine.Speaker);
            Assert.AreEqual("Branch 1 line 2", system.CurrentDialogueLine.Dialogue);

            // Nested option line
            system.StepToNextDialogueLine();
            Assert.AreEqual("options-test-user", system.CurrentDialogueLine.Speaker);
            Assert.AreEqual("Branch 1 line 3", system.CurrentDialogueLine.Dialogue);

            // 1.1
            OptionsDialogueLine nestedOptionsDialogueLine = (OptionsDialogueLine) system.CurrentDialogueLine;
            SpokenDialogueLine option11 = nestedOptionsDialogueLine.Options[0];

            system.StepToNextDialogueLine(option11);
            Assert.AreEqual("options-test-user", system.CurrentDialogueLine.Speaker);
            Assert.AreEqual("Branch 1.1 line 1", system.CurrentDialogueLine.Dialogue);

            system.StepToNextDialogueLine();
            Assert.AreEqual("options-test-user", system.CurrentDialogueLine.Speaker);
            Assert.AreEqual("Branch 1.1 line 2", system.CurrentDialogueLine.Dialogue);

            system.StepToNextDialogueLine();
            Assert.AreEqual("options-test-user", system.CurrentDialogueLine.Speaker);
            Assert.AreEqual("Branch 1.1 line 3", system.CurrentDialogueLine.Dialogue);

            // Testing that Step() at the end of a branch picks up as normal
            system.StepToNextDialogueLine();
            OptionsDialogueLine line4 = (OptionsDialogueLine) system.CurrentDialogueLine;
            Assert.AreEqual("options-test-user", line4.Speaker);
            Assert.AreEqual("This is an options test", line4.Dialogue);

            Assert.IsInstanceOf<OptionBranchDialogueLine>(line4.Options[0]);
            Assert.IsInstanceOf<OptionBranchDialogueLine>(line4.Options[1]);
        }
    }
}